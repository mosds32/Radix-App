generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model broadcast {
  boradcast_id              Int            @id @default(autoincrement())
  broadcast_title           String?        @db.VarChar(45)
  broadcast_img             String?        @db.VarChar(45)
  broadcast_url             String?        @db.VarChar(45)
  broadcast_createdat       DateTime?      @db.Date
  broadcast_modifiedat      DateTime?      @db.Date
  category_categorybroad_id Int
  category                  category       @relation(fields: [category_categorybroad_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_broadcast_category1")
  recentplayed              recentplayed[]

  @@index([category_categorybroad_id], map: "fk_broadcast_category1_idx")
}

model event {
  event_id                  Int          @id
  event_title               String?      @db.VarChar(45)
  event_description         String?      @db.VarChar(45)
  event_img                 String?      @db.Text
  event_createdat           DateTime?    @db.Date
  event_modifiedat          DateTime?    @db.Date
  category_categorybroad_id Int
  category                  category     @relation(fields: [category_categorybroad_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_category1")
  userevents                userevents[]

  @@index([category_categorybroad_id], map: "fk_event_category1_idx")
}

model login {
  login_id         Int       @id @default(autoincrement())
  login_status     Int?
  login_createdat  DateTime? @db.Date
  login_modifiedat DateTime? @db.Date
  user_user_id     Int
  user             user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_login_user1")

  @@index([user_user_id], map: "fk_login_user1_idx")
}

model otp {
  otp_id         Int       @id @default(autoincrement())
  otp_number     Int?
  otp_createdat  DateTime? @db.Date
  otp_modifiedat DateTime? @db.Date
  user_user_id   Int
  user           user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_otp_user")

  @@index([user_user_id], map: "fk_otp_user_idx")
}

model podcast {
  podcast_id           Int       @id @default(autoincrement())
  podcast_title        String?   @db.VarChar(45)
  podcast_img          String?   @db.VarChar(45)
  podcast_type         String?   @db.VarChar(45)
  podcast_url          String?   @db.VarChar(4555)
  podcast_createdat    DateTime? @db.Date
  podcast_modifiedat   DateTime? @db.Date
  category_category_id Int
  category             category  @relation(fields: [category_category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_podcast_category1")

  @@index([category_category_id], map: "fk_podcast_category1_idx")
}

model profile {
  profile_id         Int       @id @default(autoincrement())
  profile_name       String?   @db.VarChar(45)
  profile_img        String?   @db.VarChar(45)
  profile_email      String?   @db.VarChar(45)
  profile_createdat  DateTime? @db.DateTime(0)
  profile_location   String?   @db.VarChar(666)
  profile_modifiedat DateTime? @db.DateTime(0)
  user_user_id       Int
  user               user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profile_user1")

  @@index([user_user_id], map: "fk_profile_user1_idx")
}

model recentplayed {
  recentplayed_id         Int       @id @default(autoincrement())
  recentplayed_createdat  DateTime? @db.DateTime(0)
  recentplayed_modifiedat DateTime? @db.DateTime(0)
  user_user_id            Int
  broadcast_boradcast_id  Int
  broadcast               broadcast @relation(fields: [broadcast_boradcast_id], references: [boradcast_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recentplayed_broadcast1")
  user                    user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recentplayed_user1")

  @@index([broadcast_boradcast_id], map: "fk_recentplayed_broadcast1_idx")
  @@index([user_user_id], map: "fk_recentplayed_user1_idx")
}

model user {
  user_id         Int            @id @default(autoincrement())
  user_name       String?        @db.VarChar(45)
  user_email      String?        @db.VarChar(455)
  user_password   String?        @db.VarChar(4565)
  user_verify     Int?
  user_createdat  DateTime?      @db.Date
  user_modifiedat DateTime?      @db.Date
  chatdetail      chatdetail[]
  chatfile        chatfile[]
  chatpost        chatpost[]
  chatsave        chatsave[]
  favorite        favorite[]
  login           login[]
  otp             otp[]
  profile         profile[]
  recentplayed    recentplayed[]
  userevents      userevents[]
}

model userevents {
  userevents_id         Int       @id @default(autoincrement())
  userevents_createdat  DateTime? @db.DateTime(0)
  userevents_modifiedat DateTime? @db.DateTime(0)
  event_event_id        Int
  user_user_id          Int
  event                 event     @relation(fields: [event_event_id], references: [event_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userevents_event1")
  user                  user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userevents_user1")

  @@index([event_event_id], map: "fk_userevents_event1_idx")
  @@index([user_user_id], map: "fk_userevents_user1_idx")
}

model favorite {
  favorite_id         Int       @id @default(autoincrement())
  favorite_category   String?   @db.VarChar(455)
  favorite_parent     Int?
  favorite_child      Int?
  favorite_createdat  DateTime? @db.DateTime(0)
  favorite_modifiedat DateTime? @db.DateTime(0)
  user_user_id        Int
  user                user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_favoritepodcast_user1")

  @@index([user_user_id], map: "fk_favoritepodcast_user1_idx")
}

model category {
  category_id         Int         @id @default(autoincrement())
  category_type       String?     @db.VarChar(445)
  category_stype      String?     @db.VarChar(45)
  category_img        String?     @db.VarChar(445)
  category_text       String?     @db.VarChar(465)
  category_createdat  DateTime?   @db.Date
  category_modifiedat DateTime?   @db.Date
  broadcast           broadcast[]
  event               event[]
  podcast             podcast[]
}

model chatdetail {
  chatdetail_id         Int       @id @default(autoincrement())
  chatdetail_like       Int?
  chatdetail_comment    String?   @db.VarChar(4565)
  chatdetail_createdat  DateTime? @db.DateTime(0)
  chatdetail_modifiedat DateTime? @db.DateTime(0)
  chatdetail_deletedat  DateTime? @db.DateTime(0)
  user_user_id          Int
  chatpost_chatpost_id  Int
  chatpost              chatpost  @relation(fields: [chatpost_chatpost_id], references: [chatpost_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatdetail_chatpost1")
  user                  user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatdetail_user1")

  @@index([chatpost_chatpost_id], map: "fk_chatdetail_chatpost1_idx")
  @@index([user_user_id], map: "fk_chatdetail_user1_idx")
}

model chatfile {
  chatfile_id          Int       @id @default(autoincrement())
  chatfile_filename    String?   @db.VarChar(4655)
  chatfile_createdat   DateTime? @db.DateTime(0)
  chatfile_modifiedat  DateTime? @db.DateTime(0)
  chatpost_chatpost_id Int
  user_user_id         Int
  chatpost             chatpost  @relation(fields: [chatpost_chatpost_id], references: [chatpost_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatfile_chatpost1")
  user                 user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatfile_user1")

  @@index([chatpost_chatpost_id], map: "fk_chatfile_chatpost1_idx")
  @@index([user_user_id], map: "fk_chatfile_user1_idx")
}

model chatpost {
  chatpost_id        Int          @id @default(autoincrement())
  chatpost_text      String?      @db.VarChar(45)
  chatpost_is_staff  Int?
  chatpost_createdat DateTime?    @db.DateTime(0)
  chatpost_modfiedat DateTime?    @db.DateTime(0)
  chatpost_deletedat DateTime?    @db.DateTime(0)
  user_user_id       Int
  chatdetail         chatdetail[]
  chatfile           chatfile[]
  user               user         @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatpost_user1")
  chatsave           chatsave[]

  @@index([user_user_id], map: "fk_chatpost_user1_idx")
}

model chatsave {
  chatsave_id          Int       @id @default(autoincrement())
  chatsave_is_save     Int?
  chatsave_createdat   DateTime? @db.DateTime(0)
  chatsave_modifiedat  DateTime? @db.DateTime(0)
  chatsave_deletedat   DateTime? @db.DateTime(0)
  chatpost_chatpost_id Int
  user_user_id         Int
  chatpost             chatpost  @relation(fields: [chatpost_chatpost_id], references: [chatpost_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatsave_chatpost1")
  user                 user      @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatsave_user1")

  @@index([chatpost_chatpost_id], map: "fk_chatsave_chatpost1_idx")
  @@index([user_user_id], map: "fk_chatsave_user1_idx")
}
